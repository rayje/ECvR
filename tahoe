#!/usr/bin/env node

var commandLine = require('commander'), 
	factory = require('./lib/tahoeFactory'),
	config = require('./config.json'),
	options = getOptions(),
	Runner = factory.getRunner(options);

if (!Runner) {
	console.log('Unknown options');
	options.help();
}

if (options.debug) {
	config.debug = options.debug;
}
var runner = new Runner(config);
runner.run(options);

function getOptions() {
	commandLine
		.version('0.0.1')
		.description('A command line utility for remote tahoe servers')
		.option('--kill <nodeIp>', 'Stop a storage node')
		.option('--killAll', 'Stop all storage nodes')
		.option('-e, --excludes <instanceIds>', 'A comma delimted list of excluded instances')
		.option('--status', 'Displays the status of Tahoe on all instances')
		.option('--debug', 'Run in debug mode')
		.option('--capture', 'Capture storage measurement')
		.option('--startInt <nodeIp>', 'Start an introducer node on the specified instance')
		.option('--killInt <nodeIp>', 'Kill an introducer running on the specified instance')
		.option('--startAll <introducerNodeIp>', 'Start tahoe storage nodes on all but the introducer node')
		.option('--put <nodeId>', 'Put a file on tahoe.')
		.option('--filePath <filePath>', 'The path to the file used for the put command.')
		.option('--get <nodeId>', 'Get a file from tahoe')
		.option('--filename <filename>', 'The name of the remote file')
		.option('--config <nodeId>', 'Set a tahoe configuration')
		.option('-s, --storage <size>', 'reserved_space')
		.option('-n, --needed <needed>', 'shares.needed')
		.option('-t, --total <total>', 'shares.total')
		.option('-p, --happy <happy>', 'shares.happy')
		.option('-l, --listConfig', 'Display the current config value')
		.option('--list <nodeIp>', 'List the files stored on the tahoe node')

	commandLine.parse(process.argv);
	return commandLine;
}
