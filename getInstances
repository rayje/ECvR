#!/usr/bin/env node

var commandLine = require('commander'),
	Instances = require('./lib/instances'),
	config = require('./config.json'),
	sprintf = require('sprintf-js').sprintf,
	fs = require('fs');

var options = getOptions();
validateOptons(options);

var instances = new Instances(config.futuregrid);

var keys = ['imageId', 'dnsName', 'keyName', 'instanceType', 'ipAddress', 'privateIpAddress'];

instances.get(function(err, results) {
	if (err) {
		return console.log(err);
	}

	var matches = []
	results.forEach(function(result) {
		if (result.hasOwnProperty('imageId') && result.imageId === options.imageId) {
			if (result.hasOwnProperty('keyName') && result.keyName === options.keyName) {
				printResult(result);
				matches.push(result);	
			}
		}
	});

	writeResults(matches);
});

function printResult(result) {
	console.log('=====================================');
	console.log('instanceId:', result.instanceId);
	console.log('=====================================');
	keys.forEach(function(key){
		console.log(sprintf('%16s: %-32s', key, result[key]));	
	});
	console.log('-------------------------------------');
}

function writeResults(results) {
	fs.writeFile('instances.json', JSON.stringify(results), function(err) {
		if (err) {
			console.log(err);
		}
	})
}

function getOptions() {
	commandLine
		.version('0.0.1')
		.description('Used to get the instances that match a pattern and write them to a file.')
		.option('--imageId <imageId>', 'The image id used to filter the search.')
		.option('--keyName <keyName>', 'The keyName used to filter the search.')

	commandLine.parse(process.argv);
	return commandLine;
}

function validateOptons(options) {
	validateRequired(options, 'imageId');
	validateRequired(options, 'keyName');
}

function validateRequired(options, key) {
	if (!options[key]) {
		console.log('Missing required param: ' + key);
		options.help();
	}
}
